import{_ as a,r as s,o as p,c as g,a as r,b as e,d as n,w as o,e as i}from"./app-ab31641a.js";const c={},u=r("h1",{id:"spring-projects",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#spring-projects","aria-hidden":"true"},"#"),e(" Spring Projects")],-1),h={class:"custom-container tip"},_=r("p",{class:"custom-container-title"},"TIP",-1),d=r("p",null,"从配置到安全性，从 Web 应用程序到大数据——无论应用程序的基础结构需求是什么，都有一个 Spring Project 可以帮助您构建它。 从小开始并按需使用——Spring 是模块化设计的。",-1),S={href:"https://spring.io/projects",target:"_blank",rel:"noopener noreferrer"},f=i('<h2 id="spring-framework" tabindex="-1"><a class="header-anchor" href="#spring-framework" aria-hidden="true">#</a> Spring Framework</h2><h3 id="web-servlet" tabindex="-1"><a class="header-anchor" href="#web-servlet" aria-hidden="true">#</a> Web Servlet</h3><div class="custom-container tip"><p class="custom-container-title">5.3.4 版</p><p>文档的此部分涵盖对基于 Servlet API 构建并部署到 Servlet 容器的 Servlet 技术栈 Web 应用程序的支持。 各个章节包括 <a href="">Spring MVC</a>、View Technologies、CORS 支持与 WebSocket 支持。 对于反应式堆栈 Web 应用程序，请参阅“反应式堆栈上的 Web”。</p></div>',3),b=r("h2",{id:"spring-框架",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#spring-框架","aria-hidden":"true"},"#"),e(" Spring 框架")],-1),k={class:"custom-container tip"},m=r("p",{class:"custom-container-title"},"TIP",-1),A=r("ul",null,[r("li",null,"Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。"),r("li",null,"Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布。"),r("li",null,"Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。"),r("li",null,"Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。")],-1),D={href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"},C=r("h3",{id:"spring-项目",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#spring-项目","aria-hidden":"true"},"#"),e(" Spring 项目")],-1),P={class:"custom-container tip"},w=r("p",{class:"custom-container-title"},"TIP",-1),M=r("p",null,"从配置到安全性，从 Web 应用程序到大数据——无论应用程序的基础结构需求是什么，都有一个 Spring 项目可以帮助构建。 从小开始并按需使用——Spring是模块化设计的。",-1),W={href:"https://spring.io/projects",target:"_blank",rel:"noopener noreferrer"},j={href:"https://spring.io/projects/spring-boot",target:"_blank",rel:"noopener noreferrer"},v=i("<strong>【启动】</strong><ul><li>Spring Boot 可以很容易地创建独立的、基于 Spring 的生产级应用程序，只需“启动(boot)”即可。</li><li>对 Spring 平台与第三方库有自己的看法，所以可以毫不费力地开始。 大多数 Spring Boot 应用程序需要最少的 Spring 配置。</li><li>特性： <ul><li>创建独立的 Spring 应用程序</li><li>直接嵌入 Tomcat、Jetty 或 Undertow（无需部署 WAR 文件）</li><li>提供有针对性的“起步”依赖项以简化构建配置</li><li>尽可能自动配置 Spring 与第三方库</li><li>提供可用于生产的功能，例如指标，运行状况检查和外部化配置</li><li>完全没有代码生成，也不需要 XML 配置</li></ul></li></ul>",2),T={href:"https://spring.io/projects/spring-framework",target:"_blank",rel:"noopener noreferrer"},J=r("strong",null,"【框架】",-1),y=r("li",null,"Spring 框架为现代基于 Java 的企业级应用程序提供了一个全面的编程与配置模型——适用于任何类型的部署平台。",-1),I=r("li",null,"Spring 的一个关键元素是在应用程序级别的基础架构支持： Spring 专注于企业应用程序的“管道”，以便团队可以专注于应用程序级别的业务逻辑，而不必与特定的部署环境建立不必要的联系。",-1),R={href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html",target:"_blank",rel:"noopener noreferrer"},L=r("code",null,"WebTestClient",-1),E={href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/integration.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/languages.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://spring.io/projects/spring-data",target:"_blank",rel:"noopener noreferrer"},X=r("strong",null,"【数据】",-1),z=i('<li><p>Spring Data 的任务是为数据访问提供一个熟悉的、一致的、基于 Spring 的编程模型，同时仍然保留底层数据存储的特殊特性。</p></li><li><p>Spring Data 使得数据访问技术、关系型与非关系型数据库、map-reduce 框架以及基于云的数据服务的使用变得容易。 这是一个伞形项目，包含许多特定于给定数据库的子项目。 这些项目是通过与这些令人兴奋的技术背后的许多公司和开发人员一起工作来开发的。</p></li><li><p>特性：</p><ul><li>强大的存储库与自定义对象映射抽象</li><li>从存储库方法名称动态查询</li><li>提供基本属性的实现域基类</li><li>支持透明审核（已创建的、最后更改的）</li><li>集成自定义存储库代码的可能性</li><li>通过 Java 配置与自定义 XML 命名空间轻松进行 Spring 集成</li><li>与 Spring MVC 控制器的高级集成</li><li>实验性支持跨商店持久性<details class="custom-container details"><summary>Spring Data 模块</summary></details></li></ul></li>',3),K=r("p",null,"主要模块",-1),Q={href:"https://github.com/spring-projects/spring-data-commons",target:"_blank",rel:"noopener noreferrer"},G={href:"https://spring.io/projects/spring-data-jdbc",target:"_blank",rel:"noopener noreferrer"},N={href:"https://spring.io/projects/spring-data-jdbc-ext",target:"_blank",rel:"noopener noreferrer"},U={href:"https://spring.io/projects/spring-data-jpa",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/spring-projects/spring-data-keyvalue",target:"_blank",rel:"noopener noreferrer"},Z=r("code",null,"Map",-1),Y={href:"https://spring.io/projects/spring-data-ldap",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github.com/spring-projects/spring-ldap",target:"_blank",rel:"noopener noreferrer"},rr={href:"https://spring.io/projects/spring-data-mongodb",target:"_blank",rel:"noopener noreferrer"},er={href:"https://spring.io/projects/spring-data-redis",target:"_blank",rel:"noopener noreferrer"},nr={href:"https://spring.io/projects/spring-data-rest",target:"_blank",rel:"noopener noreferrer"},lr={href:"https://spring.io/projects/spring-data-cassandra",target:"_blank",rel:"noopener noreferrer"},ir={href:"https://spring.io/projects/spring-data-geode",target:"_blank",rel:"noopener noreferrer"},tr={href:"https://spring.io/projects/spring-data-gemfire",target:"_blank",rel:"noopener noreferrer"},or=r("p",null,"社区模块",-1),sr={href:"https://github.com/aerospike-community/spring-data-aerospike",target:"_blank",rel:"noopener noreferrer"},ar={href:"https://github.com/arangodb/spring-data",target:"_blank",rel:"noopener noreferrer"},pr={href:"https://spring.io/projects/spring-data-couchbase",target:"_blank",rel:"noopener noreferrer"},gr={href:"https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos",target:"_blank",rel:"noopener noreferrer"},cr={href:"https://github.com/spring-cloud/spring-cloud-gcp",target:"_blank",rel:"noopener noreferrer"},ur={href:"https://github.com/spring-cloud/spring-cloud-gcp",target:"_blank",rel:"noopener noreferrer"},hr={href:"https://github.com/boostchicken/spring-data-dynamodb",target:"_blank",rel:"noopener noreferrer"},_r={href:"https://spring.io/projects/spring-data-elasticsearch",target:"_blank",rel:"noopener noreferrer"},dr={href:"https://github.com/hazelcast/spring-data-hazelcast",target:"_blank",rel:"noopener noreferrer"},Sr={href:"https://github.com/VanRoy/spring-data-jest",target:"_blank",rel:"noopener noreferrer"},fr={href:"https://spring.io/projects/spring-data-neo4j",target:"_blank",rel:"noopener noreferrer"},br={href:"https://spring.io/projects/spring-data-solr",target:"_blank",rel:"noopener noreferrer"},kr={href:"https://spring.io/projects/spring-vault/",target:"_blank",rel:"noopener noreferrer"},mr={href:"https://github.com/spring-projects/spring-data-keyvalue",target:"_blank",rel:"noopener noreferrer"},Ar={href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"},Dr=i("<strong>【云】</strong><ul><li>Spring Cloud 为开发人员提供了工具，以快速构建分布式系统中的某些常见模式 （例如：配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话、群集状态）。 分布式系统的协调导致了样板代码，并且使用 Spring Cloud 开发人员可以快速建立实现这些模式的服务与应用程序。 Spring Cloud 可以在任何分布式环境中正常工作，包括开发人员自己的笔记本电脑、裸机数据中心以及 Cloud Foundry 等托管平台。</li><li>特性： Spring Cloud 着重于为典型用例提供良好的开箱即用体验，以及覆盖其他用例的扩展机制。 <ul><li>分布式/版本化配置</li><li>服务注册和发现</li><li>路由</li><li>服务到服务的呼叫</li><li>负载均衡</li><li>断路器</li><li>全局锁</li><li>领导选举和集群状态</li><li>分布式消息传递</li></ul></li></ul>",2),Cr={href:"https://spring.io/projects/spring-cloud-dataflow",target:"_blank",rel:"noopener noreferrer"},Pr=r("strong",null,"【云数据流】",-1),wr=r("li",null,"用于 Cloud Foundry 与 Kubernetes 的基于微服务的流式处理与批处理数据。",-1),Mr={href:"https://cloud.spring.io/spring-cloud-stream",target:"_blank",rel:"noopener noreferrer"},Wr={href:"https://cloud.spring.io/spring-cloud-task/",target:"_blank",rel:"noopener noreferrer"},jr={href:"https://projects.spring.io/spring-boot/",target:"_blank",rel:"noopener noreferrer"},vr=r("li",null,"Spring Cloud Data Flow 支持一系列数据处理用例，从 ETL 到导入/导出、事件流与预测分析。",-1),Tr={href:"https://github.com/spring-cloud/spring-cloud-deployer/",target:"_blank",rel:"noopener noreferrer"},Jr={href:"https://spring.io/projects/spring-security",target:"_blank",rel:"noopener noreferrer"},yr=r("strong",null,"【安全】",-1),Ir=r("ul",null,[r("li",null,"Spring Security 是一个功能强大且高度可定制的身份验证与访问控制框架。 是用于保护基于 Spring 的应用程序的实际标准。"),r("li",null,[e("特性： "),r("ul",null,[r("li",null,"全面且可扩展的身份验证与授权支持"),r("li",null,"防御会话固定、点击劫持、跨站点请求伪造等攻击"),r("li",null,"Servlet API 集成"),r("li",null,"与 Spring Web MVC 的可选集成"),r("li",null,"以及更多……")])])],-1),Rr={href:"https://spring.io/projects/spring-session",target:"_blank",rel:"noopener noreferrer"},Or=i("<strong>【会话】</strong><ul><li>Spring Session 提供了用于管理用户会话信息的 API 与实现。</li><li>特性： <ul><li>Spring Session 使支持集群会话变得很简单，而不必依赖于特定于应用程序容器的解决方案。</li><li>Spring Session 还提供了透明的集成： <ul><li><code>HttpSession</code>：允许以中性的方式替换应用程序容器（即 Tomcat）中的 HttpSession， 并支持在标头中提供会话 ID 以与 RESTful API 一起使用</li><li><code>WebSocket</code>：提供了在接收WebSocket消息时保持HttpSession存活的功能</li><li><code>WebSession</code>：允许以与应用程序容器无关的方式替换Spring WebFlux的WebSession</li></ul></li></ul></li><li>模块： Spring Session 由以下模块组成： <ul><li>Spring Session Core：提供核心的 Spring Session 功能与 API</li><li>Spring Session Data Redis：提供由 Redis 支持的 SessionRepository 与 ReactiveSessionRepository 实现以及配置支持</li><li>Spring Session JDBC：提供由关系数据库支持的 SessionRepository 实现与配置支持</li><li>Spring Session Hazelcast：提供由 Hazelcast 支持的 SessionRepository 实现与配置支持</li></ul></li></ul>",2),Lr={href:"https://spring.io/projects/spring-integration",target:"_blank",rel:"noopener noreferrer"},Er=r("strong",null,"【集成】",-1),Fr={href:"http://www.eaipatterns.com/",target:"_blank",rel:"noopener noreferrer"},Vr=i('<li>简介： <ul><li>使用 Spring 框架鼓励开发人员使用接口进行编码，并使用依赖注入(DI)为普通旧 Java 对象(POJO)提供执行任务所需的依赖项。 Spring Integration 使这一概念更进一步，其中 POJO 使用消息传递范例连接在一起，并且各个组件可能不知道应用程序中的其他组件。 通过组装细粒度的可重用组件以形成更高级别的功能来构建这样的应用程序。 通过精心设计，这些流程可以模块化，并且可以在更高的层次上重复使用。</li><li>除了将细粒度的组件连接在一起之外，Spring Integration 还提供了多种通道适配器与网关来与外部系统进行通信。 通道适配器用于单向集成（发送或接收）。 网关用于请求/答复方案（入站或出站）。</li><li>Spring Cloud Stream 项目基于 Spring Integration，其中 Spring Integration 用作消息驱动的微服务的引擎。<details class="custom-container details"><summary>Spring Integration 特性</summary></details></li></ul></li><li>特性： <ul><li>实现大多数企业集成模式 <ul><li>端点</li><li>渠道(点对点与发布/订阅)</li><li>聚合器</li><li>过滤器</li><li>变压器</li><li>控制总线</li></ul></li><li>与外部系统集成 <ul><li>ReST / HTTP</li><li>FTP / SFTP</li><li>推特</li><li>WebServices (SOAP 与 ReST)</li><li>TCP / UDP</li><li>JMS</li><li>RabbitMQ</li><li>电子邮件</li></ul></li><li>该框架具有广泛的 JMX 支持</li><li>将框架组件公开为 MBean</li><li>适配器从 MBean 获取属性、调用操作、发送/接收通知 :::</li></ul></li>',2),Br={href:"https://spring.io/projects/spring-hateoas",target:"_blank",rel:"noopener noreferrer"},Hr=r("s",null,"超级赛亚人",-1),xr=r("abbr",{title:"HATEOAS - Hypermedia as the engine of application state"},[r("strong",null,"【超媒体作为应用程序状态的引擎】")],-1),Xr=r("ul",null,[r("li",null,"当使用 Spring 特别是 Spring MVC 时，Spring HATEOAS 提供了一些 API 来简化创建遵循 HATEOAS 原理的 REST 表示形式的 API。 试图解决的核心问题是链接创建与表示组装。"),r("li",null,[e("特性： "),r("ul",null,[r("li",null,"链接、资源表示模型的模型类"),r("li",null,"链接构建器 API，用于创建指向 Spring MVC 控制器方法的链接"),r("li",null,"支持 HAL 等超媒体格式")])])],-1),zr={href:"https://spring.io/projects/spring-restdocs",target:"_blank",rel:"noopener noreferrer"},Kr=r("strong",null,"REST 文档",-1),Qr={href:"https://www.zhihu.com/question/28557115",target:"_blank",rel:"noopener noreferrer"},Gr={href:"http://asciidoctor.org/",target:"_blank",rel:"noopener noreferrer"},Nr={href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle#spring-mvc-test-framework",target:"_blank",rel:"noopener noreferrer"},Ur={href:"http://swagger.io/",target:"_blank",rel:"noopener noreferrer"},qr=r("li",null,"Spring REST Docs 可以帮助生成准确、简洁且结构合理的文档。 然后，该文档可让用户以最少的麻烦获得他们所需的信息。",-1),Zr={href:"https://spring.io/projects/spring-batch",target:"_blank",rel:"noopener noreferrer"},Yr=r("strong",null,"【批处理】",-1),$r=r("li",null,"一个轻量级的，全面的批处理框架，旨在支持开发对企业系统的日常运行至关重要的强大的批处理应用程序。",-1),re=r("li",null,"Spring Batch 提供了可复用的功能，这些功能对于处理大量记录至关重要， 包括日志记录/跟踪、事务管理、作业处理统计信息、作业重启、跳过与资源管理。 还提供了更高级的技术服务和功能，这些功能和功能将通过优化和分区技术来实现极高容量和高性能的批处理作业。 简单以及复杂的大批量批处理作业都能以高度可扩展的方式利用框架来处理大量信息。",-1),ee=r("li",null,"事务管理",-1),ne=r("li",null,"基于区块的处理",-1),le=r("li",null,"声明式 I/O",-1),ie=r("li",null,"启动/停止/重启",-1),te=r("li",null,"重试/跳过",-1),oe={href:"https://cloud.spring.io/spring-cloud-dataflow",target:"_blank",rel:"noopener noreferrer"},se={href:"https://spring.io/projects/spring-amqp",target:"_blank",rel:"noopener noreferrer"},ae=r("abbr",{title:"AMQP - Advanced Message Queuing Protocol"},[r("strong",null,"【高级消息队列协议】")],-1),pe={title:"Plain Old Java Object"},ge={href:"https://zhuanlan.zhihu.com/p/49026165",target:"_blank",rel:"noopener noreferrer"},ce=r("li",null,"该项目包括两个部分；spring-amqp 是基础抽象、spring-rabbit 是 RabbitMQ 实现。",-1),ue=r("li",null,[e("特性： "),r("ul",null,[r("li",null,"侦听器容器，用于异步处理入站消息"),r("li",null,"用于发送和接收消息的 RabbitTemplate"),r("li",null,"RabbitAdmin 用于自动声明队列、交换与绑定")])],-1),he={href:"https://spring.io/projects/spring-android",target:"_blank",rel:"noopener noreferrer"},_e=r("ul",null,[r("li",null,"Spring for Android 是一个框架，旨在提供用于 Android 应用程序的 Spring 项目系列的组件。 与所有 Spring 项目一样，Android 的真正强大之处在于它的扩展容易程度。"),r("li",null,[e("特性： "),r("ul",null,[r("li",null,"适用于 Android 的 REST 客户端"),r("li",null,"身份验证支持访问安全 API")])])],-1),de={href:"https://spring.io/projects/spring-credhub",target:"_blank",rel:"noopener noreferrer"},Se={href:"https://www.cloudfoundry.org/",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://github.com/cloudfoundry-incubator/credhub",target:"_blank",rel:"noopener noreferrer"},be={href:"https://github.com/cloudfoundry-incubator/credhub",target:"_blank",rel:"noopener noreferrer"},ke={href:"https://credhub-api.cfapps.io/",target:"_blank",rel:"noopener noreferrer"},me={href:"https://spring.io/projects/spring-flo",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://cloud.spring.io/spring-cloud-dataflow/",target:"_blank",rel:"noopener noreferrer"},De=r("li",null,"Flo 包含集成流设计器的所有基本元素，例如连接器、控制节点、调色板、状态转换与图形拓扑 ——重要的是，它具有命令行界面、DSL 支持与设计用于创建与查看全面工作流程的图形画布。",-1),Ce=r("li",null,[e("特性： "),r("ul",null,[r("li",null,"使用 DSL 或图形画布创建、管理与监视流管道，或者两者兼用"),r("li",null,"通过具有代码提示与自动补全功能的 DSL 编写管道"),r("li",null,"看到分布式部署中模块的直观表示"),r("li",null,"使用 GUI 中的自动调整与网格布局功能可以更简单、更高效地组织管道")])],-1),Pe={href:"https://spring.io/projects/spring-kafka",target:"_blank",rel:"noopener noreferrer"},we=r("code",null,"@KafkaListener",-1),Me={title:"Plain Old Java Object"},We={href:"https://zhuanlan.zhihu.com/p/49026165",target:"_blank",rel:"noopener noreferrer"},je=i("<li>特性： <ul><li><code>KafkaTemplate</code></li><li><code>KafkaMessageListenerContainer</code></li><li><code>@KafkaListener</code></li><li><code>KafkaTransactionManager</code></li><li>带有嵌入式 kafka 服务器的 <code>spring-kafka-test</code> jar</li></ul></li>",1),ve={href:"https://spring.io/projects/spring-ldap",target:"_blank",rel:"noopener noreferrer"},Te={title:"LDAP - Light Directory Access Portocol"},Je={href:"https://www.cnblogs.com/wilburxu/p/9174353.html",target:"_blank",rel:"noopener noreferrer"},ye=r("strong",null,"【轻量级目录访问协议】",-1),Ie=r("ul",null,[r("li",null,"Spring LDAP 是一个用于简化 Java 中 LDAP 编程的库，其建立原理与 Spring Jdbc 相同。"),r("li",null,"LdapTemplate 类封装了传统 LDAP 编程中涉及的所有管道工作，例如创建、遍历命名枚举、处理异常与清理资源。 这使程序员可以处理重要的事情——在何处查找数据（DN 与过滤器）以及如何处理数据（与域对象进行映射、绑定、修改、取消绑定等）， 正如 JdbcTemplate 将程序员从实际的 SQL 中解放出来一样，以及数据如何映射到域模型。"),r("li",null,"除此之外，Spring LDAP 还提供了从命名异常到未检查的异常层次结构的异常转换，以及用于处理过滤器，LDAP 路径与属性的多个实用程序。")],-1),Re={href:"https://spring.io/projects/spring-mobile",target:"_blank",rel:"noopener noreferrer"},Oe=r("strong",null,"【移动设备】",-1),Le=r("ul",null,[r("li",null,"Spring Mobile 是一个框架，该框架提供的功能可以检测向 Spring 网站发出请求的设备的类型，并基于该设备提供其他视图。 像所有 Spring 项目一样，Spring Mobile 的真正强大之处在于它可以很容易地进行扩展。"),r("li",null,[e("特性： "),r("ul",null,[r("li",null,"设备解析器抽象，用于移动设备与平板设备的服务器端检测"),r("li",null,"网站首选项管理，允许用户指示自己是否喜欢“正常”、“移动”或“平板电脑”体验"),r("li",null,"站点切换器，能够根据用户的设备与可选的站点首选项，将用户切换到最适合的网站，无论是手机，平板电脑还是普通网站"),r("li",null,"设备感知视图管理，用于组织与管理特定设备的不同视图")])])],-1),Ee={href:"https://projects.spring.io/spring-roo",target:"_blank",rel:"noopener noreferrer"},Fe=r("ul",null,[r("li",null,"Spring Roo 是一个轻量级的开发人员工具，可快速轻松地交付即时结果。 最重要的是，可以 100％ 用 Java 编写代码，并可以重用所有现有的 Java 知识、技能与经验。")],-1),Ve={href:"https://spring.io/projects/spring-shell",target:"_blank",rel:"noopener noreferrer"},Be=i("<strong>【命令行】</strong><ul><li>Spring Shell 项目的用户可以通过依赖于 Spring Shell jar 并添加自己的命令（在 Spring 容器中作为方法来提供） 来轻松构建功能齐全的 shell（又名命令行）应用程序。 创建命令行应用程序可能非常有用，例如：与项目的 REST API 进行交互，或使用本地文件内容。</li><li>特性： <ul><li>一个简单的注释驱动的编程模型，可以贡献自定义命令</li><li>使用 Spring Boot 自动配置功能作为命令插件策略的基础</li><li>制表符完备，着色与脚本执行</li><li>自定义命令提示符，shell 历史记录文件名，结果和错误处理</li><li>根据域特定条件动态启用命令</li><li>与容器验证 API 集成</li><li>已经内置的命令，例如清晰的屏幕、漂亮的帮助、退出</li><li>ASCII 艺术表、具有格式、对齐方式、花式边框等</li></ul></li></ul>",2),He={href:"https://spring.io/projects/spring-statemachine",target:"_blank",rel:"noopener noreferrer"},xe=i("<strong>【状态机】</strong><ul><li>Spring Statemachine 是一个框架，供应用程序开发人员在 Spring 应用程序中使用状态机概念。</li><li>状态机之所以强大，是因为始终保证行为是一致的，因此调试起来相对容易。 这是因为在启动机器时，操作规则是一成不变的。 这个想法是，应用程序可能以有限数量的状态存在，并且某些预定义的触发器可以将应用程序从一种状态转移到另一种状态。 这样的触发器可以基于事件或计时器。</li><li>在应用程序外部定义高级逻辑，然后依靠状态机来管理状态要容易得多。 可以通过发送事件，侦听更改或仅请求当前状态来与状态机进行交互。</li><li>特性： <ul><li>易于使用的单层状态机，用于简单的用例。</li><li>分层状态机结构可简化复杂的状态配置。</li><li>状态机区域提供甚至更复杂的状态配置。</li><li>触发器、过渡、防护与操作的使用。</li><li>键入安全配置适配器。</li><li>用于在 Spring 应用上下文之外使用的易于实例化的建造者模式</li><li>常用案例食谱</li><li>基于 Zookeeper 的分布式状态机</li><li>状态机事件监听器。</li><li>UML Eclipse Papyrus 建模。</li><li>将机器配置存储在持久性存储中。</li><li>Spring IOC 集成，将 Bean 与状态机关联。</li></ul></li></ul>",2),Xe={href:"https://spring.io/projects/spring-vault",target:"_blank",rel:"noopener noreferrer"},ze=r("strong",null,"【保险库】",-1),Ke=r("li",null,"Spring Vault 为访问、存储与回收机密提供了熟悉的 Spring 抽象与客户端支持。 为与 Vault 交互提供了低层和高层的抽象，将用户从基础设施的关注点中解放出来。",-1),Qe=r("li",null,[e("使用 HashiCorp 的保险柜，可以在中心位置管理所有环境中应用程序的外部秘密数据。 Vault 可以管理静态与动态机密，例如应用程序数据，远程应用程序/资源的用户名/密码，并为外部服务 （例如MySQL、PostgreSQL、Apache Cassandra、Consul、AWS等）提供凭据。"),r("details",{class:"custom-container details"},[r("summary",null,"Spring Vault 特性")])],-1),Ge=r("li",null,[e("使用基于 Java 的 "),r("code",null,"@Configuration"),e(" 类的 Spring 配置支持。")],-1),Ne={title:"Plain Old Java Object"},Ue={href:"https://zhuanlan.zhihu.com/p/49026165",target:"_blank",rel:"noopener noreferrer"},qe=i("<li>支持的身份验证机制： <ul><li>Token</li><li>AppRole</li><li>AWS-EC2</li><li>AWS-IAM</li><li>Azure MSI</li><li>Certificates (PKI)</li><li>Cubbyhole</li><li>GCP-GCE</li><li>GCP-IAM</li><li>Kubernetes</li><li>Pivotal CloudFoundry</li></ul></li><li>基于注释的 <code>@VaultPropertySource</code> 集成</li><li>支持可再生和循环的机密</li><li>功能丰富的对象映射与 Spring 的转换服务集成</li><li>与 Spring 转换服务集成的丰富对象映射特性</li><li>存储库接口的自动实现，包括对自定义查询方法的支持。 :::</li>",6),Ze={href:"https://spring.io/projects/spring-webflow",target:"_blank",rel:"noopener noreferrer"},Ye=i("<strong>【Web 流】</strong><ul><li>Spring Web Flow 建立在 Spring MVC 之上，并允许实现 Web 应用程序的“流”。 流封装了指导用户完成某些业务任务的一系列步骤。 跨越多个 HTTP 请求、具有状态、处理事务数据、可重用、并且本质上可以是动态的并且可以长期运行。</li><li>Spring Web Flow 的最佳应用是具有受控导航的有状态 Web 应用程序，如办理航班登记、申请贷款、购物车结帐，甚至向表单添加确认步骤。 这些场景的共同之处在于以下一个或多个特征： <ul><li>有一个明确的起点和终点。</li><li>用户必须按特定顺序浏览一组屏幕。</li><li>直到最后一步，更改才能最终确定。</li><li>完成后，就不能意外重复一个事务。</li></ul></li><li>Spring Web Flow 提供了一种声明性的流程定义语言，用于在更高的抽象级别上创作流程。 允许将其集成到各种应用程序中，而无需进行任何更改（对流编程模型）（包括 Spring MVC、JSF 甚至 Portlet Web 应用程序）。 以下是在有导航要求的有状态 Web 应用程序中观察到的常见问题： <ul><li>可视化流程非常困难。</li><li>该应用程序具有许多访问 HTTP 会话的代码。</li><li>实施受控导航很重要，但不可能。</li><li>适当的浏览器后退按钮支持似乎无法实现。</li><li>浏览器和服务器与“返回”按钮的使用不同步。</li><li>多个浏览器选项卡导致 HTTP 会话数据并发问题。</li><li>Spring Web Flow 提供了上述问题的解决方案。</li></ul></li></ul>",2),$e={href:"https://spring.io/projects/spring-ws",target:"_blank",rel:"noopener noreferrer"},rn=r("strong",null,"【Web 服务】",-1),en={href:"https://www.runoob.com/soap/soap-intro.html",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://www.runoob.com/soap/soap-intro.html",target:"_blank",rel:"noopener noreferrer"},ln=i("<li>特性： <ul><li>使最佳实践变得容易： Spring Web Services 使实施最佳实践更加容易。 这包括诸如 WS-I 基本概要文件，合同优先开发之类的实践，以及合同与实施之间的松散耦合。</li><li>强大的映射：可以根据消息有效负载，SOAP Action 标头或 XPath 表达式，将传入的 XML 请求分发到任何对象。</li><li>XML API 支持： 可以使用标准的 JAXP API（例如 DOM、SAX 与 StAX）处理传入的 XML 消息，也可以使用 JDOM、dom4j、XOM 甚至是编组技术来处理。</li><li>灵活的 XML 编组： Spring Web Services 发行版中的对象/XML 映射模块支持 JAXB 1和2、Castor、XMLBeans、JiBX 与 XStream。 并且由于它是一个单独的模块，因此也可以在非 Web 服务代码中使用它。</li><li>重用 Spring 专业知识： Spring-WS 使用 Spring 应用程序上下文进行所有配置，这将有助于 Spring 开发人员快速，良好地掌握最新信息。 而且，Spring-WS 的体系结构类似于 Spring-MVC 的体系结构。</li><li>支持 WS-Security： WS-Security 允​​许对 SOAP 消息进行签名、加密与解密，或针对它们进行身份验证。</li><li>与 Acegi Security 集成： Spring Web Services 的 WS-Security 实现提供与 Spring Security 的集成。 这意味着也可以将现有配置用于 SOAP 服务。</li><li>由Maven构建：可以帮助在自己的基于 Maven 的项目中有效地重用 Spring Web Services 构件。</li><li>Apache许可证：可以放心地在项目中使用 Spring-WS。</li></ul></li>",1);function tn(on,sn){const l=s("ExternalLinkIcon"),t=s("RouterLink");return p(),g("div",null,[u,r("div",h,[_,d,r("p",null,[r("a",S,[e("Spring 项目概览"),n(l)])])]),f,r("ol",null,[r("li",null,[n(t,{to:"/coding/Spring/Framework/WebServlet/1.SpringWebMVC.html"},{default:o(()=>[e("Spring Web MVC")]),_:1})]),r("li",null,[n(t,{to:"/coding/Spring/Framework/WebServlet/2.REST_Clients.html"},{default:o(()=>[e("REST 客户端")]),_:1})]),r("li",null,[n(t,{to:"/coding/Spring/Framework/WebServlet/3.Testing.html"},{default:o(()=>[e("测试")]),_:1})]),r("li",null,[n(t,{to:"/coding/Spring/Framework/WebServlet/4.WebSockets.html"},{default:o(()=>[e("WebSockets")]),_:1}),e(" Spring MVC、WebSocket、SockJS、STOMP 消息传递")]),r("li",null,[n(t,{to:"/coding/Spring/Framework/WebServlet/5.OtherWebFrameworks.html"},{default:o(()=>[e("其他 Web 框架")]),_:1})])]),b,r("div",k,[m,A,r("p",null,[r("a",D,[e("Spring 官网"),n(l)])])]),C,r("div",P,[w,M,r("p",null,[r("a",W,[e("Spring 项目概览"),n(l)])])]),r("ul",null,[r("li",null,[r("a",j,[e("Spring Boot"),n(l)]),e(),v]),r("li",null,[r("a",T,[e("Spring Framework"),n(l)]),e(),J,r("ul",null,[y,I,r("li",null,[e("特性： "),r("ul",null,[r("li",null,[r("a",R,[e("核心技术"),n(l)]),e("： 依赖项注入、事件、资源、国际化、验证、数据绑定、类型转换、SpEL、AOP。")]),r("li",null,[r("a",O,[e("测试"),n(l)]),e("： 模拟对象、TestContext 框架、Spring MVC 测试、"),L,e("。")]),r("li",null,[r("a",E,[e("数据访问"),n(l)]),e("： 事务、DAO 支持、JDBC、ORM、编组 XML。")]),r("li",null,[r("a",F,[e("Spring MVC"),n(l)]),e("与 "),r("a",V,[e("Spring WebFlux"),n(l)]),e(" Web 框架。")]),r("li",null,[r("a",B,[e("集成"),n(l)]),e("： 远程处理、JMS、JCA、JMX、电子邮件、任务、调度、缓存。")]),r("li",null,[r("a",H,[e("编程语言"),n(l)]),e("： Kotlin、Groovy、动态语言。")])])])])]),r("li",null,[r("a",x,[e("Spring Data"),n(l)]),e(),X,r("ul",null,[z,r("li",null,[K,r("ul",null,[r("li",null,[r("a",Q,[e("Spring Data Commons"),n(l)]),e("： 支撑起每个 Spring Data 模块的核心 Spring 概念。")]),r("li",null,[r("a",G,[e("Spring Data JDBC"),n(l)]),e("： Spring Data 对 JDBC 的支持。")]),r("li",null,[r("a",N,[e("Spring Data JDBC Ext"),n(l)]),e("： 对标准 JDBC 的特定数据库扩展的支持，包括对 Oracle RAC 快速连接故障转移的支持、AQ JMS 支持以及对使用高级数据类型的支持。")]),r("li",null,[r("a",U,[e("Spring Data JPA"),n(l)]),e("： Spring Data 对 JPA 的支持。")]),r("li",null,[r("a",q,[e("Spring Data KeyValue"),n(l)]),e("： 基于映射("),Z,e(")与 SPI，可以轻松地为键值存储构建 Spring Data 模块。")]),r("li",null,[r("a",Y,[e("Spring Data LDAP"),n(l)]),e("： Spring Data 对 "),r("a",$,[e("Spring LDAP"),n(l)]),e(" 的支持。")]),r("li",null,[r("a",rr,[e("Spring Data MongoDB"),n(l)]),e("： 基于 Spring 的对象文档支持与 MongoDB。")]),r("li",null,[r("a",er,[e("Spring Data Redis"),n(l)]),e("： 轻松配置并从 Spring 应用程序访问 Redis。")]),r("li",null,[r("a",nr,[e("Spring Data REST"),n(l)]),e("： 将 Spring Data 导出为超媒体驱动的 RESTful 资源。")]),r("li",null,[r("a",lr,[e("Spring Data for Apache Cassandra"),n(l)]),e("： 轻松配置并访问 Apache Cassandra 或大规模、高可用性、面向数据的 Spring 应用程序。")]),r("li",null,[r("a",ir,[e("Spring Data for Apache Geode"),n(l)]),e("： 轻松配置并访问 Apache Geode，以实现高度一致、低延迟、面向数据的 Spring 应用程序。")]),r("li",null,[r("a",tr,[e("Spring Data for Pivotal GemFire"),n(l)]),e("： 轻松配置并访问 Pivotal GemFire，以实现高度一致、低延迟/高吞吐量的面向数据的 Spring 应用程序。")])])]),r("li",null,[or,r("ul",null,[r("li",null,[r("a",sr,[e("Spring Data Aerospike"),n(l)])]),r("li",null,[r("a",ar,[e("Spring Data ArangoDB"),n(l)])]),r("li",null,[r("a",pr,[e("Spring Data Couchbase"),n(l)])]),r("li",null,[r("a",gr,[e("Spring Data Azure Cosmos DB"),n(l)])]),r("li",null,[r("a",cr,[e("Spring Data Cloud Datastore"),n(l)])]),r("li",null,[r("a",ur,[e("Spring Data Cloud Spanner"),n(l)])]),r("li",null,[r("a",hr,[e("Spring Data DynamoDB"),n(l)])]),r("li",null,[r("a",_r,[e("Spring Data Elasticsearch"),n(l)])]),r("li",null,[r("a",dr,[e("Spring Data Hazelcast"),n(l)]),e("： 为 Hazelcast 提供 Spring Data 支持。")]),r("li",null,[r("a",Sr,[e("Spring Data Jest"),n(l)]),e(": 基于 Jest REST 客户端的 Elasticsearch 的 Spring Data 模块。")]),r("li",null,[r("a",fr,[e("Spring Data Neo4j"),n(l)]),e("： Neo4j 的基于 Spring 的对象图支持。")]),r("li",null,[r("a",br,[e("Spring Data for Apache Solr"),n(l)]),e("： 轻松配置并为面向搜索的 Spring 应用程序访问Apache Solr。")]),r("li",null,[r("a",kr,[e("Spring Data Vault"),n(l)]),e("： 基于 "),r("a",mr,[e("Spring Data KeyValue"),n(l)]),e(" 构建的保管库。 :::")])])])])]),r("li",null,[r("a",Ar,[e("Spring Cloud"),n(l)]),e(),Dr]),r("li",null,[r("a",Cr,[e("Spring Cloud Data Flow"),n(l)]),e(),Pr,r("ul",null,[wr,r("li",null,[e("Spring Cloud Data Flow 提供了用于为流处理与批处理数据管道创建复杂拓扑的工具。 数据管道包含使用 "),r("a",Mr,[e("Spring Cloud Stream"),n(l)]),e(" 或 "),r("a",Wr,[e("Spring Cloud Task"),n(l)]),e(" 微服务框架构建的 "),r("a",jr,[e("Spring Boot"),n(l)]),e(" 应用程序。")]),vr,r("li",null,[e("特性： "),r("ul",null,[r("li",null,[e("Spring Cloud Data Flow 服务器使用 "),r("a",Tr,[e("Spring Cloud Deployer"),n(l)]),e(" 将由Spring Cloud Stream 或 Spring Cloud Task 应用程序组成的数据管道部署到 Cloud Foundry 与 Kubernetes 等现代平台上。")])])])])]),r("li",null,[r("a",Jr,[e("Spring Security"),n(l)]),e(),yr,Ir]),r("li",null,[r("a",Rr,[e("Spring Session"),n(l)]),e(),Or]),r("li",null,[r("a",Lr,[e("Spring Integration"),n(l)]),e(),Er,r("ul",null,[r("li",null,[e("扩展 Spring 编程模型以支持著名的 "),r("a",Fr,[e("企业集成模式(Enterprise Integration Patterns)"),n(l)]),e("。 Spring Integration 支持在基于 Spring 的应用程序中进行轻量级消息传递，并通过声明性适配器支持与外部系统的集成。 这些适配器提供了 Spring 对远程、消息传递与调度支持的更高级别的抽象。 Spring Integration 的主要目标是为构建企业集成解决方案提供一个简单的模型，同时保持关注点的分离，这对于生成可维护、可测试的代码至关重要。")]),Vr])]),r("li",null,[r("a",Br,[e("Spring HATEOAS"),n(l)]),Hr,xr,Xr]),r("li",null,[r("a",zr,[e("Spring REST Docs"),n(l)]),e(),Kr,r("ul",null,[r("li",null,[e("Spring REST Docs 可帮助记录 "),r("a",Qr,[e("RESTful"),n(l)]),e(" 服务。")]),r("li",null,[e("Spring REST Docs 结合了用 "),r("a",Gr,[e("Asciidoctor"),n(l)]),e(" 编写的手写文档与 "),r("a",Nr,[e("Spring MVC Test"),n(l)]),e(" 生成的自动生成的代码片段。 这种方式可以从诸如 "),r("a",Ur,[e("Swagger"),n(l)]),e(" 等工具生成的文档的限制中解放出来。")]),qr])]),r("li",null,[r("a",Zr,[e("Spring Batch"),n(l)]),e(),Yr,r("ul",null,[$r,re,r("li",null,[e("特性： "),r("ul",null,[ee,ne,le,ie,te,r("li",null,[e("基于 Web 的管理界面（"),r("a",oe,[e("Spring Cloud Data Flow"),n(l)]),e("）")])])])])]),r("li",null,[r("a",se,[e("Spring AMQP"),n(l)]),ae,r("ul",null,[r("li",null,[e("Spring AMQP 项目将 Spring 的核心概念应用于基于 AMQP 的消息传递解决方案的开发。 提供了一个“模板”作为用于发送和接收消息的高级抽象。 还通过“监听器容器”为消息驱动的 "),r("abbr",pe,[r("a",ge,[e("POJO"),n(l)])]),e(" 提供支持。 这些库促进了 AMQP 资源的管理，同时促进了对依赖项注入和声明性配置的使用。 在所有这些情况下，将看到与 Spring Framework 中的 JMS 支持相似的地方。")]),ce,ue])]),r("li",null,[r("a",he,[e("Spring for Android"),n(l)]),_e]),r("li",null,[r("a",de,[e("Spring CredHub"),n(l)]),r("ul",null,[r("li",null,[e("Spring CredHub 提供客户端支持，用于从 "),r("a",Se,[e("Cloud Foundry"),n(l)]),e(" 平台中运行的 "),r("a",fe,[e("CredHub"),n(l)]),e(" 服务器存储、检索与删除凭据。")]),r("li",null,[r("a",be,[e("CredHub"),n(l)]),e(" 提供了一个 "),r("a",ke,[e("API"),n(l)]),e("， 可以安全地存储、生成、检索与删除各种类型的凭据。 Spring CredHub 为 CredHub API 提供了 Java 绑定，可轻松将 Spring 应用程序与 CredHub 集成。")])])]),r("li",null,[r("a",me,[e("Spring Flo"),n(l)]),r("ul",null,[r("li",null,[e("Spring Flo 是一个 JavaScript 库，为管道与简单图形提供了一个基本的可嵌入 HTML5 可视生成器。 该库用作 "),r("a",Ae,[e("Spring Cloud Data Flow"),n(l)]),e(" 中流构建器的基础。")]),De,Ce])]),r("li",null,[r("a",Pe,[e("Spring for Apache Kafka"),n(l)]),r("ul",null,[r("li",null,[e("用于 Apache Kafka 的 Spring（spring-kafka）项目将 Spring 的核心概念应用到基于 Kafka 的消息解决方案的开发中。 提供了一个“模板”作为发送消息的高级抽象。 还通过 "),we,e(" 批注与“监听器容器”为消息驱动的 "),r("abbr",Me,[r("a",We,[e("POJO"),n(l)])]),e(" 提供支持。 这些库促进了依赖注入和声明式的使用。 在所有这些情况下，将看到与 Spring 框架中的 JMS 支持以及 Spring AMQP 中的 RabbitMQ 支持相似。")]),je])]),r("li",null,[r("a",ve,[e("Spring LDAP"),n(l)]),r("abbr",Te,[r("a",Je,[ye,n(l)])]),Ie]),r("li",null,[r("a",Re,[e("Spring Mobile"),n(l)]),e(),Oe,Le]),r("li",null,[r("a",Ee,[e("Spring Roo"),n(l)]),Fe]),r("li",null,[r("a",Ve,[e("Spring Shell"),n(l)]),e(),Be]),r("li",null,[r("a",He,[e("Spring Statemachine"),n(l)]),e(),xe]),r("li",null,[r("a",Xe,[e("Spring Vault"),n(l)]),e(),ze,r("ul",null,[Ke,Qe,r("li",null,[e("特性： "),r("ul",null,[Ge,r("li",null,[e("VaultTemplate 帮助程序类，可提高执行常见 Mongo 操作的效率。 包括文档与 "),r("abbr",Ne,[r("a",Ue,[e("POJO"),n(l)])]),e(" 之间的集成对象映射。")]),qe])])])]),r("li",null,[r("a",Ze,[e("Spring Web Flow"),n(l)]),e(),Ye]),r("li",null,[r("a",$e,[e("Spring WebServices"),n(l)]),e(),rn,r("ul",null,[r("li",null,[e("Spring Web Services（Spring-WS）是 Spring 社区的产品，致力于创建文档驱动的 Web 服务。 Spring Web Services 旨在促进合同优先 "),r("a",en,[e("SOAP"),n(l)]),e(" 服务的开发，从而允许使用多种处理 XML 有效负载的方式之一来创建灵活的 Web 服务。 该产品基于 Spring 本身，这意味着可以将诸如依赖项注入之类的 Spring 概念用作 Web 服务的组成部分。")]),r("li",null,[e("人们使用 Spring-WS 的原因有很多，但是大多数人在找到了遵循 Web 服务最佳实践所缺乏的替代 "),r("a",nn,[e("SOAP"),n(l)]),e(" 堆栈之后才开始使用它。")]),ln])])])])}const pn=a(c,[["render",tn],["__file","index.html.vue"]]);export{pn as default};
